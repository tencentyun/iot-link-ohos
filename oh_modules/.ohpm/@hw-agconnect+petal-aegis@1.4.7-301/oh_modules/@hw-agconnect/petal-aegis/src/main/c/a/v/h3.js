import { CipherAlg, Coder, KeyType, SignAlg } from "../../../ets/a/b"; import { AsyKeyAlg } from "../y2/d3"; import { SM2Alg, SM2SignAlg } from "../y2/z2"; import { HmacAlg } from "../e3/f3"; import { AESAlg } from "../t2/u2"; import { SM4Alg } from "../t2/w2"; export class AlgUtil { static getAesAlgType(type) { return AlgUtil.AES_ALG_MAP[type]; } static getsm4AlgType(type) { return AlgUtil.SM4_ALG_MAP[type]; } static getsm2AlgType(type) { return AlgUtil.SM2_ALG_MAP[type]; } static getsm2SignAlgType(type) { return AlgUtil.SM2SIGN_ALG_MAP[type]; } static getAsyKeyAlgType(type) { return AlgUtil.ASYKEY_ALG_MAP[type]; } static getHmacAlgType(type) { return AlgUtil.HMAC_ALG_MAP[type]; } static getUint8Array(input) { if (input instanceof Uint8Array) { return input; } else { return Coder.UTF8.decode(input); } } static getUint8ArrayFromHex(input) { if (input instanceof Uint8Array) { return input; } else { return Coder.HEX.decode(input); } } static getUint8ArrayFromBase64(input) { if (input instanceof Uint8Array) { return input; } else { return Coder.BASE64.decode(input); } } static getBase64FromUint8Array(input) { return Coder.BASE64.encode(input); } } AlgUtil.TAG = 'aegis AlgUtil'; AlgUtil.COMMON_IV_LEN = 16; AlgUtil.AES_GCM_IV_LEN = 12; AlgUtil.AES_ALG_MAP = { [AESAlg.AES_CBC_PKCS5Padding]: { algType: CipherAlg.AES_CBC_PKCS5_PADDING, ivLen: AlgUtil.COMMON_IV_LEN }, [AESAlg.AES_CBC_PKCS7Padding]: { algType: CipherAlg.AES_CBC_PKCS7_PADDING, ivLen: AlgUtil.COMMON_IV_LEN }, [AESAlg.AES_GCM_NoPadding]: { algType: CipherAlg.AES_GCM_NO_PADDING, ivLen: AlgUtil.AES_GCM_IV_LEN }, [AESAlg.AES_OFB_NoPadding]: { algType: CipherAlg.AES_OFB_NO_PADDING, ivLen: AlgUtil.COMMON_IV_LEN }, [AESAlg.AES_CTR_NoPadding]: { algType: CipherAlg.AES_CTR_NO_PADDING, ivLen: AlgUtil.COMMON_IV_LEN }, [AESAlg.AES_CFB_NoPadding]: { algType: CipherAlg.AES_CFB_NO_PADDING, ivLen: AlgUtil.COMMON_IV_LEN }, }; AlgUtil.SM4_ALG_MAP = { [SM4Alg.SM4_CBC_PKCS5Padding]: { algType: CipherAlg.SM4_CBC_PKCS5_PADDING, ivLen: AlgUtil.COMMON_IV_LEN }, [SM4Alg.SM4_CBC_PKCS7Padding]: { algType: CipherAlg.SM4_CBC_PKCS7_PADDING, ivLen: AlgUtil.COMMON_IV_LEN }, [SM4Alg.SM4_CTR_NoPadding]: { algType: CipherAlg.SM4_CTR_NO_PADDING, ivLen: AlgUtil.COMMON_IV_LEN }, [SM4Alg.SM4_OFB_NoPadding]: { algType: CipherAlg.SM4_OFB_NO_PADDING, ivLen: AlgUtil.COMMON_IV_LEN }, [SM4Alg.SM4_CFB_NoPadding]: { algType: CipherAlg.SM4_CFB_NO_PADDING, ivLen: AlgUtil.COMMON_IV_LEN }, [SM4Alg.SM4_CFB128_NoPadding]: { algType: CipherAlg.SM4_CFB128_NO_PADDING, ivLen: AlgUtil.COMMON_IV_LEN }, }; AlgUtil.SM2_ALG_MAP = { [SM2Alg.SM2_256_SHA256]: { algType: CipherAlg.SM2_256_SHA256, ivLen: AlgUtil.COMMON_IV_LEN }, [SM2Alg.SM2_256_SHA384]: { algType: CipherAlg.SM2_256_SHA384, ivLen: AlgUtil.COMMON_IV_LEN }, [SM2Alg.SM2_256_SHA512]: { algType: CipherAlg.SM2_256_SHA512, ivLen: AlgUtil.COMMON_IV_LEN }, [SM2Alg.SM2_256_SM3]: { algType: CipherAlg.SM2_256_SM3, ivLen: AlgUtil.COMMON_IV_LEN }, }; AlgUtil.SM2SIGN_ALG_MAP = { [SM2SignAlg.SM2_256_SM3]: { algType: SignAlg.SM2_256_SM3, ivLen: AlgUtil.COMMON_IV_LEN }, }; AlgUtil.ASYKEY_ALG_MAP = { [AsyKeyAlg.RSA3072_PRIMES_2]: { algType: KeyType.RSA_3072_PRIMES_2, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.RSA3072_PRIMES_3]: { algType: KeyType.RSA_3072_PRIMES_3, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.RSA4096_PRIMES_2]: { algType: KeyType.RSA_4096_PRIMES_2, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.RSA4096_PRIMES_3]: { algType: KeyType.RSA_4096_PRIMES_3, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.RSA4096_PRIMES_4]: { algType: KeyType.RSA_4096_PRIMES_4, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.RSA8192_PRIMES_2]: { algType: KeyType.RSA_8192_PRIMES_2, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.RSA8192_PRIMES_3]: { algType: KeyType.RSA_8192_PRIMES_3, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.RSA8192_PRIMES_4]: { algType: KeyType.RSA_8192_PRIMES_4, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.RSA8192_PRIMES_5]: { algType: KeyType.RSA_8192_PRIMES_5, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.ECC256]: { algType: KeyType.ECC_256, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.ECC384]: { algType: KeyType.ECC_384, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.ECC521]: { algType: KeyType.ECC_521, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.ECC_BrainPoolP256r1]: { algType: KeyType.ECC_BRAINPOOL_P256_R1, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.ECC_BrainPoolP256t1]: { algType: KeyType.ECC_BRAINPOOL_P256_T1, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.ECC_BrainPoolP320r1]: { algType: KeyType.ECC_BRAINPOOL_P320_R1, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.ECC_BrainPoolP320t1]: { algType: KeyType.ECC_BRAINPOOL_P320_T1, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.ECC_BrainPoolP384r1]: { algType: KeyType.ECC_BRAINPOOL_P384_R1, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.ECC_BrainPoolP384t1]: { algType: KeyType.ECC_BRAINPOOL_P384_T1, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.ECC_BrainPoolP512r1]: { algType: KeyType.ECC_BRAINPOOL_P512_R1, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.ECC_BrainPoolP512t1]: { algType: KeyType.ECC_BRAINPOOL_P512_T1, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.SM2_256]: { algType: KeyType.SM2_256, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.DH_modp3072]: { algType: KeyType.DH_MODP_3072, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.DH_modp4096]: { algType: KeyType.DH_MODP_4096, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.DH_modp6144]: { algType: KeyType.DH_MODP_6144, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.DH_modp8192]: { algType: KeyType.DH_MODP_8192, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.DH_ffdhe3072]: { algType: KeyType.DH_FFDHE_3072, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.DH_ffdhe4096]: { algType: KeyType.DH_FFDHE_4096, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.DH_ffdhe6144]: { algType: KeyType.DH_FFDHE_6144, ivLen: AlgUtil.COMMON_IV_LEN }, [AsyKeyAlg.DH_ffdhe8192]: { algType: KeyType.DH_FFDHE_8192, ivLen: AlgUtil.COMMON_IV_LEN }, }; AlgUtil.HMAC_ALG_MAP = { [HmacAlg.SHA224]: { algType: SignAlg.HMAC_SHA224, keyLen: 28 }, [HmacAlg.SHA256]: { algType: SignAlg.HMAC_SHA256, keyLen: 32 }, [HmacAlg.SHA384]: { algType: SignAlg.HMAC_SHA384, keyLen: 48 }, [HmacAlg.SHA512]: { algType: SignAlg.HMAC_SHA512, keyLen: 64 }, [HmacAlg.SM3]: { algType: SignAlg.HMAC_SM3, keyLen: 32 }, }; 