import { AsySigner } from "../../../ets/a/b"; import { AegLogger } from "../../c2/d2"; import { AlgUtil } from "../v/h3"; export class SM2Sign { static async sm2SignText(v23, w23, priKey) { return new Promise(async (y23, z23) => { try { let a24 = AlgUtil.getsm2SignAlgType(v23); let b24 = AlgUtil.getUint8Array(w23); let c24 = AlgUtil.getUint8ArrayFromBase64(priKey); let d24 = await AsySigner .builder() .withSignAlg(a24.algType) .withPriKey(c24) .build(); d24.getSignHandler().from(b24).to().then((data) => { y23(data); }).catch((err) => { AegLogger.error(SM2Sign.TAG, 'SM2SignText signer.getSignHandler fail, err code: ' + err.code + ', err msg: ' + err.message); z23(err); }); } catch (err) { AegLogger.error(SM2Sign.TAG, 'SM2SignText fail, err code: ' + err.code + ', err msg: ' + err.message); return z23(err); } }); } static async sm2SignTextBase64(n23, o23, priKey) { return new Promise(async (q23, r23) => { try { SM2Sign.sm2SignText(n23, o23, priKey).then((data) => { let u23 = AlgUtil.getBase64FromUint8Array(data); q23(u23); }).catch((err) => { AegLogger.error(SM2Sign.TAG, 'SM2SignTextBase64 SM2Sign.SM2SignText fail, err code: ' + err.code + ', err msg: ' + err.message); r23(err); }); } catch (err) { AegLogger.error(SM2Sign.TAG, 'SM2SignTextBase64 fail, err code: ' + err.code + ', err msg: ' + err.message); return r23(err); } }); } static async sm2CheckSign(b23, c23, pubKey, sign) { return new Promise(async (e23, f23) => { try { let g23 = AlgUtil.getsm2SignAlgType(b23); let h23 = AlgUtil.getUint8Array(c23); let i23 = AlgUtil.getUint8ArrayFromBase64(pubKey); let j23 = AlgUtil.getUint8ArrayFromBase64(sign); let k23 = await AsySigner .builder() .withSignAlg(g23.algType) .withPubKey(i23) .build(); k23.getVerifyHandler().from(h23).verify(j23).then((data) => { e23(data); }).catch((err) => { AegLogger.error(SM2Sign.TAG, 'SM2CheckSign getEncryptHandler fail, err code: ' + err.code + ', err msg: ' + err.message); f23(err); }); } catch (err) { AegLogger.error(SM2Sign.TAG, 'SM2CheckSign parse fail, err code: ' + err.code + ', err msg: ' + err.message); f23(err); } }); } } SM2Sign.TAG = 'aegis SM2Sign'; export class KeyPair { constructor(publicKey, a23) { this.publicKey = publicKey; this.privateKey = a23; } } export const sm2SignText = SM2Sign.sm2SignText; export const sm2SignTextBase64 = SM2Sign.sm2SignTextBase64; export const sm2CheckSign = SM2Sign.sm2CheckSign; 