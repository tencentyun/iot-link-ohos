export declare class AegSM { private static TAG; private static IV_LEN; static ohAegSMEncText(text: string | Uint8Array, key: string | Uint8Array, iv?: string | Uint8Array): Promise<Uint8Array>; static ohAegSMDecText(x43: string | Uint8Array, key: string | Uint8Array): Promise<string>; static ohAegSMEncTextHex(text: string | Uint8Array, key: string | Uint8Array, iv?: string | Uint8Array): Promise<string>; static ohAegSMDecTextHex(w43: string | Uint8Array, key: string | Uint8Array): Promise<string>; static ohAegSMEncHex(text: string | Uint8Array, key: string | Uint8Array, iv?: string | Uint8Array): Promise<string>; static ohAegSMEnc(text: string | Uint8Array, key: string | Uint8Array, iv?: string | Uint8Array): Promise<Uint8Array>; static ohAegSMDecHex(text: string | Uint8Array, key: string | Uint8Array): Promise<string>; static ohAegSMDec(text: string | Uint8Array, key: string | Uint8Array): Promise<Uint8Array>; private static getUint8Array; private static getCiphertextUint8Array; } export declare class Ciphertext { iv: any; text: any; constructor(iv: any, text: any); } 