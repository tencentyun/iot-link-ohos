import cryptoFramework from '@ohos.security.cryptoFramework'; import { CipherHandler } from "../b2"; import type { CipherAlg, CipherParamsSpec } from "../i1"; export declare abstract class AESCipherHandler extends CipherHandler { protected mode: cryptoFramework.CryptoMode; protected key: cryptoFramework.SymKey; protected paramsSpec: CipherParamsSpec; protected cipher: cryptoFramework.Cipher; constructor(b47: CipherAlg, mode: cryptoFramework.CryptoMode, key: cryptoFramework.SymKey, c47: CipherParamsSpec); protected init(): Promise<void>; protected update(z46: Array<Uint8Array>, a47: Array<number>): Promise<void>; protected doCrypto(x46: Array<Uint8Array>, y46: Array<number>): Promise<void>; protected abstract final(v46: Array<Uint8Array>, w46: Array<number>): Promise<void>; } export declare class AESCommonCipherHandler extends AESCipherHandler { protected final(t46: Uint8Array[], u46: number[]): Promise<void>; } export declare function preprocessAuthParams(inputs: Array<Uint8Array>, r46: CipherParamsSpec, s46: boolean): void; export declare class AESAuthCipherHandler extends AESCipherHandler { protected final(p46: Uint8Array[], q46: number[]): Promise<void>; protected doCrypto(n46: Uint8Array[], o46: number[]): Promise<void>; private preprocess; } 