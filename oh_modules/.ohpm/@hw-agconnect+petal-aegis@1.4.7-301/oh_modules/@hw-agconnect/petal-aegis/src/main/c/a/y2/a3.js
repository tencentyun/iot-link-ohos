import { AsyCipher } from "../../../ets/a/b"; import { AegLogger } from "../../c2/d2"; import { AlgUtil } from "../v/h3"; import { uint8ArrayToString } from "../../q/s2"; export class SM2 { static async sm2EncText(p22, q22, pubKey) { return new Promise(async (s22, t22) => { try { let u22 = AlgUtil.getUint8Array(q22); let v22 = AlgUtil.getUint8ArrayFromBase64(pubKey); SM2.sm2Enc(p22, u22, v22).then((data) => { s22(data); }).catch((err) => { AegLogger.error(SM2.TAG, 'SM2.SM2Enc getEncryptHandler fail, err code: ' + err.code + ', err msg: ' + err.message); t22(err); }); } catch (err) { AegLogger.error(SM2.TAG, 'sm2EncText parse fail, err code: ' + err.code + ', err msg: ' + err.message); t22(err); } }); } static async sm2DecText(g22, h22, priKey) { return new Promise(async (j22, k22) => { try { let l22 = AlgUtil.getUint8ArrayFromBase64(priKey); SM2.sm2Dec(g22, h22, l22).then((data) => { let o22 = uint8ArrayToString(data); j22(o22); }).catch((err) => { AegLogger.error(SM2.TAG, 'SM2.SM2Dec fail, err code: ' + err.code + ', err msg: ' + err.message); k22(err); }); } catch (err) { AegLogger.error(SM2.TAG, 'sm2DecText parse fail, err code: ' + err.code + ', err msg: ' + err.message); k22(err); } }); } static async sm2EncTextBase64(w21, x21, pubKey) { return new Promise(async (z21, a22) => { try { let b22 = AlgUtil.getUint8Array(x21); let c22 = AlgUtil.getUint8ArrayFromBase64(pubKey); SM2.sm2Enc(w21, b22, c22).then((data) => { let f22 = AlgUtil.getBase64FromUint8Array(data); z21(f22); }).catch((err) => { AegLogger.error(SM2.TAG, 'sm2EncTextBase64 getEncryptHandler fail, err code: ' + err.code + ', err msg: ' + err.message); a22(err); }); } catch (err) { AegLogger.error(SM2.TAG, 'sm2EncTextBase64 parse fail, err code: ' + err.code + ', err msg: ' + err.message); a22(err); } }); } static async sm2DecTextBase64(m21, n21, priKey) { return new Promise(async (p21, q21) => { try { let r21 = AlgUtil.getUint8ArrayFromBase64(n21); let s21 = AlgUtil.getUint8ArrayFromBase64(priKey); SM2.sm2Dec(m21, r21, s21).then((data) => { let v21 = uint8ArrayToString(data); p21(v21); }).catch((err) => { AegLogger.error(SM2.TAG, 'SM2.SM2Dec fail, err code: ' + err.code + ', err msg: ' + err.message); q21(err); }); } catch (err) { AegLogger.error(SM2.TAG, 'SM2DecTextHex parse fail, err code: ' + err.code + ', err msg: ' + err.message); q21(err); } }); } static async sm2Enc(c21, d21, pubKey) { return new Promise(async (f21, g21) => { try { let h21 = AlgUtil.getsm2AlgType(c21); let i21 = AlgUtil.getUint8ArrayFromBase64(pubKey); let j21 = await AsyCipher .builder() .withCipherAlg(h21.algType) .withPubKey(i21) .build(); j21.getEncryptHandler() .from(d21) .to() .then((data) => { f21(data); }) .catch((err) => { AegLogger.error(SM2.TAG, 'SM2Enc cipher.getEncryptHandler fail, err code: ' + err.code + ', err msg: ' + err.message); g21(err); }); } catch (err) { AegLogger.error(SM2.TAG, 'SM2Enc parse fail, err code: ' + err.code + ', err msg: ' + err.message); g21(err); } }); } static async sm2Dec(s20, t20, priKey) { return new Promise(async (v20, w20) => { try { let x20 = AlgUtil.getsm2AlgType(s20); let y20 = AlgUtil.getUint8ArrayFromBase64(priKey); let z20 = await AsyCipher .builder() .withCipherAlg(x20.algType) .withPriKey(y20) .build(); z20.getDecryptHandler() .from(t20) .to() .then((data) => { v20(data); }) .catch((err) => { AegLogger.error(SM2.TAG, 'SM2Dec cipher.getDecryptHandler fail, err code: ' + err.code + ', err msg: ' + err.message); w20(err); }); } catch (err) { AegLogger.error(SM2.TAG, 'SM2Dec parse fail, err code: ' + err.code + ', err msg: ' + err.message); w20(err); } }); } } SM2.TAG = 'aegis SM2'; export const sm2EncText = SM2.sm2EncText; export const sm2DecText = SM2.sm2DecText; export const sm2EncTextBase64 = SM2.sm2EncTextBase64; export const sm2DecTextBase64 = SM2.sm2DecTextBase64; export const sm2Enc = SM2.sm2Enc; export const sm2Dec = SM2.sm2Dec; 