import huks from '@ohos.security.huks'; import { KeyInfoCenter } from "../../z/k2"; import { HuksSignHandler } from "../p2"; import { HuksVerifyHandler } from "../q2"; import { Signer } from "../m1"; import { SignerInfoCenter } from "../l2"; class HuksHmacSignHandler extends HuksSignHandler { async doSign() { let t7 = SignerInfoCenter.load(this.signAlg); let keyInfo = KeyInfoCenter.load(t7.keyType); let options = keyInfo.optionsFunc(); let handle = await huks.initSession(this.keyAlias, options); for (let input of this.inputs) { options.inData = input; await huks.updateSession(handle.handle, options); } options.inData = new Uint8Array(); let u7 = await huks.finishSession(handle.handle, options); return u7.outData; } } class HuksHmacVerifyHandler extends HuksVerifyHandler { async doVerify(signature) { let q7 = SignerInfoCenter.load(this.signAlg); let keyInfo = KeyInfoCenter.load(q7.keyType); let options = keyInfo.optionsFunc(); let handle = await huks.initSession(this.keyAlias, options); for (let input of this.inputs) { options.inData = input; await huks.updateSession(handle.handle, options); } options.inData = new Uint8Array(); let r7 = await huks.finishSession(handle.handle, options); let s7 = r7.outData; if (signature.length !== s7.length) { return false; } for (let index = 0; index < s7.length; index++) { if (signature[index] !== s7[index]) { return false; } } return true; } } export class HuksHmacSigner extends Signer { constructor(p7, keyAlias) { super(p7); this.signHandler = new HuksHmacSignHandler(p7, keyAlias); this.verifyHandler = new HuksHmacVerifyHandler(p7, keyAlias); } } 