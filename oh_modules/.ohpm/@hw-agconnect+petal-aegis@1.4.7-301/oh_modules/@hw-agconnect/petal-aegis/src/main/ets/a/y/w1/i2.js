import huks from '@ohos.security.huks'; export var huksOptions; (function (b4) { function c4() { let properties = [ { tag: huks.HuksTag.HUKS_TAG_ALGORITHM, value: huks.HuksKeyAlg.HUKS_ALG_AES }, { tag: huks.HuksTag.HUKS_TAG_PURPOSE, value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_ENCRYPT | huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_DECRYPT }, { tag: huks.HuksTag.HUKS_TAG_KEY_SIZE, value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_256 }, { tag: huks.HuksTag.HUKS_TAG_BLOCK_MODE, value: huks.HuksCipherMode.HUKS_MODE_GCM }, { tag: huks.HuksTag.HUKS_TAG_PADDING, value: huks.HuksKeyPadding.HUKS_PADDING_NONE, } ]; return { properties: properties }; } b4.getAESGcm256GenerateOptions = c4; function d4(i4) { let properties = [ { tag: huks.HuksTag.HUKS_TAG_ALGORITHM, value: huks.HuksKeyAlg.HUKS_ALG_AES, }, { tag: huks.HuksTag.HUKS_TAG_PURPOSE, value: i4.huksCryptoMode, }, { tag: huks.HuksTag.HUKS_TAG_KEY_SIZE, value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_256 }, { tag: huks.HuksTag.HUKS_TAG_PADDING, value: huks.HuksKeyPadding.HUKS_PADDING_NONE, }, { tag: huks.HuksTag.HUKS_TAG_BLOCK_MODE, value: huks.HuksCipherMode.HUKS_MODE_GCM, }, { tag: huks.HuksTag.HUKS_TAG_DIGEST, value: huks.HuksKeyDigest.HUKS_DIGEST_NONE, }, { tag: huks.HuksTag.HUKS_TAG_NONCE, value: i4.iv.data, }, { tag: huks.HuksTag.HUKS_TAG_AE_TAG, value: i4.authTag.data, } ]; if (i4.aad.data) { properties.push({ tag: huks.HuksTag.HUKS_TAG_ASSOCIATED_DATA, value: i4.aad.data, }); } return { properties: properties }; } b4.getAESGcm256CryptoOptions = d4; function e4(purpose) { let properties = [ { tag: huks.HuksTag.HUKS_TAG_ALGORITHM, value: huks.HuksKeyAlg.HUKS_ALG_ECC }, { tag: huks.HuksTag.HUKS_TAG_PURPOSE, value: purpose }, { tag: huks.HuksTag.HUKS_TAG_KEY_SIZE, value: huks.HuksKeySize.HUKS_ECC_KEY_SIZE_256 }, { tag: huks.HuksTag.HUKS_TAG_DIGEST, value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256 } ]; return { properties: properties }; } b4.getECC256Options = e4; function f4() { return e4(huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_VERIFY | huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_SIGN); } b4.getECC256GenerateOptions = f4; function g4() { return e4(huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_UNWRAP); } b4.getECC256UnwrapGenerateOptions = g4; function h4() { let properties = [ { tag: huks.HuksTag.HUKS_TAG_ALGORITHM, value: huks.HuksKeyAlg.HUKS_ALG_HMAC }, { tag: huks.HuksTag.HUKS_TAG_PURPOSE, value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_MAC }, { tag: huks.HuksTag.HUKS_TAG_KEY_SIZE, value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_256 }, { tag: huks.HuksTag.HUKS_TAG_DIGEST, value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256 } ]; return { properties: properties }; } b4.getHmac256Options = h4; })(huksOptions || (huksOptions = {})); 