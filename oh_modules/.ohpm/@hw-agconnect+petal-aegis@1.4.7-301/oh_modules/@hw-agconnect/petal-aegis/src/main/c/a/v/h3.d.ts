import { CipherAlg, KeyType, SignAlg } from "../../../ets/a/b"; import { AsyKeyAlg } from "../y2/d3"; import { SM2Alg, SM2SignAlg } from "../y2/z2"; import { HmacAlg } from "../e3/f3"; import { AESAlg } from "../t2/u2"; import { SM4Alg } from "../t2/w2"; export declare class AlgUtil { private static TAG; private static readonly COMMON_IV_LEN; private static readonly AES_GCM_IV_LEN; private static AES_ALG_MAP; private static SM4_ALG_MAP; private static SM2_ALG_MAP; private static SM2SIGN_ALG_MAP; private static ASYKEY_ALG_MAP; private static HMAC_ALG_MAP; static getAesAlgType(type: AESAlg): { algType: CipherAlg; ivLen: number; }; static getsm4AlgType(type: SM4Alg): { algType: CipherAlg; ivLen: number; }; static getsm2AlgType(type: SM2Alg): { algType: CipherAlg; ivLen: number; }; static getsm2SignAlgType(type: SM2SignAlg): { algType: SignAlg; ivLen: number; }; static getAsyKeyAlgType(type: AsyKeyAlg): { algType: KeyType; ivLen: number; }; static getHmacAlgType(type: HmacAlg): { algType: SignAlg; keyLen: number; }; static getUint8Array(input: string | Uint8Array): Uint8Array; static getUint8ArrayFromHex(input: string | Uint8Array): Uint8Array; static getUint8ArrayFromBase64(input: string | Uint8Array): Uint8Array; static getBase64FromUint8Array(input: Uint8Array): string; } 