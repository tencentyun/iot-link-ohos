import type { ICoder } from "./s1/t1"; export declare class DataReceiver { protected inputs: Array<Uint8Array>; from(data: Uint8Array): this; fromWithCoder(data: string, j46: ICoder): this; fromString(data: string): this; fromBase64(data: string): this; fromBase64Url(data: string): this; fromHex(data: string): this; protected clear(): void; } export declare abstract class DataProcessor extends DataReceiver { abstract to(): Promise<Uint8Array>; toWithCoder(i46: ICoder): Promise<string>; toString(): Promise<string>; toBase64(): Promise<string>; toBase64Url(): Promise<string>; toHex(isUpperCase?: boolean): Promise<string>; } 