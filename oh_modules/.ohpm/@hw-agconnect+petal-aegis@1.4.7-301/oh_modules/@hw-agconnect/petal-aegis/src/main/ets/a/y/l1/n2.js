import { AegisError } from "../../s/t"; import { AegisErrorCode } from "../../s/u"; import { Logger } from "../../c2/d2"; import { Coder } from "../s1/t1"; import { DataReceiver } from "../h2"; export class VerifyHandler extends DataReceiver { constructor(m8) { super(); this.signAlg = m8; } async verify(signature) { try { await this.prepare(); let result = await this.doVerify(signature); this.clear(); return result; } catch (err) { let errMsg = `verify failed, code:${err.code} msg:${err.message}`; Logger.error(errMsg); throw new AegisError(AegisErrorCode.VERIFY_ERROR, errMsg); } } async verifyWithCoder(signature, l8) { return await this.verify(l8.decode(signature)); } async verifyBase64(signature) { return await this.verifyWithCoder(signature, Coder.BASE64); } async verifyBase64Url(signature) { return await this.verifyWithCoder(signature, Coder.BASE64URL); } async verifyHex(signature) { return await this.verifyWithCoder(signature, Coder.HEX); } async prepare() { } } 