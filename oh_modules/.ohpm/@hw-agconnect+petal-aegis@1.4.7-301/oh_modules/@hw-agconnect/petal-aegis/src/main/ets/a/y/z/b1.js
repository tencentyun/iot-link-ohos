import cryptoFramework from '@ohos.security.cryptoFramework'; import huks from '@ohos.security.huks'; import { AegisError } from "../../s/t"; import { AegisErrorCode } from "../../s/u"; import { Logger } from "../../c2/d2"; import { KeyInfoCenter } from "./k2"; export class KeyManager { static async generateKey(h6) { let keyInfo = KeyInfoCenter.load(h6); let i6 = cryptoFramework.createSymKeyGenerator(keyInfo.algName); return await i6.generateSymKey(); } static async generateKeyPair(f6) { let keyInfo = KeyInfoCenter.load(f6); let g6 = cryptoFramework.createAsyKeyGenerator(keyInfo.algName); return await g6.generateKeyPair(); } static async hasHuksKey(e6, alias) { let keyInfo = KeyInfoCenter.load(e6); if (!keyInfo.optionsFunc) { throw new AegisError(AegisErrorCode.BAD_KEY_TYPE, 'load key options from key info failed'); } try { return await huks.isKeyItemExist(alias, keyInfo.optionsFunc()); } catch (err) { if (err.code === huks.HuksExceptionErrCode.HUKS_ERR_CODE_ITEM_NOT_EXIST) { return false; } throw err; } } static async generateHuksKey(d6, alias) { let keyInfo = KeyInfoCenter.load(d6); if (!keyInfo.optionsFunc) { throw new AegisError(AegisErrorCode.BAD_KEY_TYPE, 'load key options from key info failed'); } await huks.generateKeyItem(alias, keyInfo.optionsFunc()); } static async deleteHuksKey(c6, alias) { let keyInfo = KeyInfoCenter.load(c6); if (!keyInfo.optionsFunc) { throw new AegisError(AegisErrorCode.BAD_KEY_TYPE, 'load key options from key info failed'); } await huks.deleteKeyItem(alias, keyInfo.optionsFunc()); } static async exportHuksKeyItem(a6, alias) { let keyInfo = KeyInfoCenter.load(a6); if (!keyInfo.optionsFunc) { throw new AegisError(AegisErrorCode.BAD_KEY_TYPE, 'load key options from key info failed'); } try { let b6 = await huks.exportKeyItem(alias, keyInfo.optionsFunc()); return b6.outData; } catch (err) { throw err; } } static async checkAndGenerateHuksKey(y5, alias) { let z5 = await KeyManager.hasHuksKey(y5, alias); if (!z5) { await KeyManager.generateHuksKey(y5, alias); Logger.info(`generate huks key item for alias:${alias}`); } } } 