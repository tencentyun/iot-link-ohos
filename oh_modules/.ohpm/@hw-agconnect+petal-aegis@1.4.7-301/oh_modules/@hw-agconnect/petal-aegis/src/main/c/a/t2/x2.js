import { AESCipher } from "../../../ets/a/b"; import { SafeRandom } from "../../e"; import { AegLogger } from "../../c2/d2"; import { AlgUtil } from "../v/h3"; import { CipherUtil } from "../v/i3"; import { hexStringToUint8Array, stringToUint8Array, uint8ArraytoHexString, uint8ArrayToString } from "../../q/s2"; export class SM4 { static async sm4EncText(f30, g30, key, iv) { return new Promise(async (i30, j30) => { try { let k30 = stringToUint8Array(g30); SM4.sm4Enc(f30, k30, key, iv).then((data) => { i30(data); }).catch((err) => { AegLogger.error(SM4.TAG, 'SM4.sm4Enc getEncryptHandler fail, err code: ' + err.code + ', err msg: ' + err.message); j30(err); }); } catch (err) { AegLogger.error(SM4.TAG, 'sm4EncTextHex parse fail, err code: ' + err.code + ', err msg: ' + err.message); j30(err); } }); } static async sm4DecText(x29, y29, key, iv) { return new Promise(async (a30, b30) => { try { SM4.sm4Dec(x29, y29, key, iv).then((data) => { let e30 = uint8ArrayToString(data); a30(e30); }).catch((err) => { AegLogger.error(SM4.TAG, 'SM4.sm4Dec fail, err code: ' + err.code + ', err msg: ' + err.message); b30(err); }); } catch (err) { AegLogger.error(SM4.TAG, 'sm4DecTextHex parse fail, err code: ' + err.code + ', err msg: ' + err.message); b30(err); } }); } static async sm4EncTextHex(k29, l29, key, iv) { return new Promise(async (n29, o29) => { try { let p29 = stringToUint8Array(l29); let q29 = AlgUtil.getsm4AlgType(k29); SM4.sm4Enc(k29, p29, key, iv).then((data) => { let t29 = uint8ArraytoHexString(data); if (!iv) { let u29 = q29.ivLen * 2; let v29 = t29.slice(0, u29); let w29 = t29.slice(u29 + 2); t29 = v29 + ':' + w29; } n29(t29); }).catch((err) => { AegLogger.error(SM4.TAG, 'SM4.sm4Enc getEncryptHandler fail, err code: ' + err.code + ', err msg: ' + err.message); o29(err); }); } catch (err) { AegLogger.error(SM4.TAG, 'sm4EncTextHex parse fail, err code: ' + err.code + ', err msg: ' + err.message); o29(err); } }); } static async sm4DecTextHex(b29, c29, key, iv) { return new Promise(async (e29, f29) => { try { if (!iv) { c29 = c29.replace(":", "3a"); } let g29 = hexStringToUint8Array(c29); SM4.sm4Dec(b29, g29, key, iv).then((data) => { let j29 = uint8ArrayToString(data); e29(j29); }).catch((err) => { AegLogger.error(SM4.TAG, 'SM4.sm4Dec fail, err code: ' + err.code + ', err msg: ' + err.message); f29(err); }); } catch (err) { AegLogger.error(SM4.TAG, 'sm4DecTextHex parse fail, err code: ' + err.code + ', err msg: ' + err.message); f29(err); } }); } static async sm4Enc(p28, q28, key, iv) { return new Promise(async (s28, t28) => { try { let u28 = new Uint8Array(); let v28 = AlgUtil.getsm4AlgType(p28); if (iv) { u28 = AlgUtil.getUint8ArrayFromHex(iv); } else { u28 = SafeRandom.ohAegRandom(v28.ivLen); } let w28 = AlgUtil.getUint8ArrayFromHex(key); let x28 = await AESCipher .builder() .withCipherAlg(v28.algType) .withKeyBytes(w28) .withIv(u28) .build(); x28.getEncryptHandler().from(q28).to().then((data) => { if (iv) { s28(data); } else { let a29 = CipherUtil.getCipherText(u28, data); s28(a29); } }).catch((err) => { AegLogger.error(SM4.TAG, 'sm4EncText getEncryptHandler fail, err code: ' + err.code + ', err msg: ' + err.message); t28(err); }); } catch (err) { AegLogger.error(SM4.TAG, 'sm4EncText parse fail, err code: ' + err.code + ', err msg: ' + err.message); t28(err); } }); } static async sm4Dec(c28, d28, key, iv) { return new Promise(async (f28, g28) => { try { let h28 = AlgUtil.getsm4AlgType(c28); let i28 = new Uint8Array(); let j28 = new Uint8Array(); if (iv) { i28 = AlgUtil.getUint8ArrayFromHex(iv); j28 = d28; } else { let o28 = CipherUtil.getCiphertextUint8Array(d28, h28.ivLen); i28 = o28.iv; j28 = o28.text; } let k28 = AlgUtil.getUint8ArrayFromHex(key); let l28 = await AESCipher .builder() .withCipherAlg(h28.algType) .withKeyBytes(k28) .withIv(i28) .build(); l28.getDecryptHandler().from(j28).to().then((data) => { f28(data); }).catch((err) => { AegLogger.error(SM4.TAG, 'sm4DecText getDecryptHandler fail, err code: ' + err.code + ', err msg: ' + err.message); g28(err); }); } catch (err) { AegLogger.error(SM4.TAG, 'sm4DecText parse fail, err code: ' + err.code + ', err msg: ' + err.message); g28(err); } }); } } SM4.TAG = 'aegis SM4'; export const sm4EncText = SM4.sm4EncText; export const sm4DecText = SM4.sm4DecText; export const sm4EncTextHex = SM4.sm4EncTextHex; export const sm4DecTextHex = SM4.sm4DecTextHex; export const sm4Enc = SM4.sm4Enc; export const sm4Dec = SM4.sm4Dec; 