var __decorate = (this && this.k) || function (w3, target, key, desc) { var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d; if (typeof Reflect === "object" && typeof Reflect.m === "function") r = Reflect.m(w3, target, key, desc); else for (var x3 = w3.length - 1; x3 >= 0; x3--) if (d = w3[x3]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r; return c > 3 && r && Object.defineProperty(target, key, r), r; }; import { huksOptions } from "../w1/i2"; import { KeyType } from "../z/a1"; import { RegisterCenter } from "../j2"; import { CipherAlg } from "./i1"; function aegisCipherInfo(s3) { return function (target, u3) { let v3 = target[`${u3}`]; CipherInfoCenter.register(v3, s3); }; } const COMMON_IV_LEN = 16; const GCM_IV_LEN = 12; const CCM_IV_LEN = 7; export class CipherInfoCenter { static register(q3, r3) { CipherInfoCenter.center.register(q3, r3); } static load(p3) { return CipherInfoCenter.center.load(p3); } } CipherInfoCenter.AES_GCM_NO_PADDING = CipherAlg.AES_GCM_NO_PADDING; CipherInfoCenter.AES_CBC_PKCS7_PADDING = CipherAlg.AES_CBC_PKCS7_PADDING; CipherInfoCenter.AES_CBC_PKCS5_PADDING = CipherAlg.AES_CBC_PKCS5_PADDING; CipherInfoCenter.AES_CTR_NO_PADDING = CipherAlg.AES_CTR_NO_PADDING; CipherInfoCenter.AES_OFB_NO_PADDING = CipherAlg.AES_OFB_NO_PADDING; CipherInfoCenter.AES_CCM_NO_PADDING = CipherAlg.AES_CCM_NO_PADDING; CipherInfoCenter.AES_CFB_NO_PADDING = CipherAlg.AES_CFB_NO_PADDING; CipherInfoCenter.SM4_CBC_PKCS7_PADDING = CipherAlg.SM4_CBC_PKCS7_PADDING; CipherInfoCenter.SM4_CBC_PKCS5_PADDING = CipherAlg.SM4_CBC_PKCS5_PADDING; CipherInfoCenter.SM4_CTR_NO_PADDING = CipherAlg.SM4_CTR_NO_PADDING; CipherInfoCenter.SM4_OFB_NO_PADDING = CipherAlg.SM4_OFB_NO_PADDING; CipherInfoCenter.SM4_CFB_NO_PADDING = CipherAlg.SM4_CFB_NO_PADDING; CipherInfoCenter.SM4_CFB128_NO_PADDING = CipherAlg.SM4_CFB128_NO_PADDING; CipherInfoCenter.RSA_OAEP_SHA256_MGF1_SHA256 = CipherAlg.RSA_OAEP_SHA256_MGF1_SHA256; CipherInfoCenter.SM2_256_SHA256 = CipherAlg.SM2_256_SHA256; CipherInfoCenter.SM2_256_SHA384 = CipherAlg.SM2_256_SHA384; CipherInfoCenter.SM2_256_SHA512 = CipherAlg.SM2_256_SHA512; CipherInfoCenter.SM2_256_SM3 = CipherAlg.SM2_256_SM3; CipherInfoCenter.HUKS_AES_GCM_256_NO_PADDING = CipherAlg.HUKS_AES_GCM_256_NO_PADDING; CipherInfoCenter.center = new RegisterCenter(); __decorate([ aegisCipherInfo({ transformation: ['AES128|GCM|NoPadding', 'AES192|GCM|NoPadding', 'AES256|GCM|NoPadding'], ivLen: GCM_IV_LEN, authTagLen: 16, paramsSpecAlgName: 'GcmParamsSpec' }) ], CipherInfoCenter, "AES_GCM_NO_PADDING", void 0); __decorate([ aegisCipherInfo({ transformation: ['AES128|CBC|PKCS7', 'AES192|CBC|PKCS7', 'AES256|CBC|PKCS7'], ivLen: COMMON_IV_LEN, paramsSpecAlgName: 'IvParamsSpec' }) ], CipherInfoCenter, "AES_CBC_PKCS7_PADDING", void 0); __decorate([ aegisCipherInfo({ transformation: ['AES128|CBC|PKCS5', 'AES192|CBC|PKCS5', 'AES256|CBC|PKCS5'], ivLen: COMMON_IV_LEN, paramsSpecAlgName: 'IvParamsSpec' }) ], CipherInfoCenter, "AES_CBC_PKCS5_PADDING", void 0); __decorate([ aegisCipherInfo({ transformation: ['AES128|CTR|NoPadding', 'AES192|CTR|NoPadding', 'AES256|CTR|NoPadding'], ivLen: COMMON_IV_LEN, paramsSpecAlgName: 'IvParamsSpec' }) ], CipherInfoCenter, "AES_CTR_NO_PADDING", void 0); __decorate([ aegisCipherInfo({ transformation: ['AES128|OFB|NoPadding', 'AES192|OFB|NoPadding', 'AES256|OFB|NoPadding'], ivLen: COMMON_IV_LEN, paramsSpecAlgName: 'IvParamsSpec' }) ], CipherInfoCenter, "AES_OFB_NO_PADDING", void 0); __decorate([ aegisCipherInfo({ transformation: ['AES128|CCM|NoPadding', 'AES192|CCM|NoPadding', 'AES256|CCM|NoPadding'], ivLen: CCM_IV_LEN, authTagLen: 12, paramsSpecAlgName: 'CcmParamsSpec' }) ], CipherInfoCenter, "AES_CCM_NO_PADDING", void 0); __decorate([ aegisCipherInfo({ transformation: ['AES128|CFB|NoPadding', 'AES192|CFB|NoPadding', 'AES256|CFB|NoPadding'], ivLen: COMMON_IV_LEN, paramsSpecAlgName: 'IvParamsSpec' }) ], CipherInfoCenter, "AES_CFB_NO_PADDING", void 0); __decorate([ aegisCipherInfo({ transformation: ['SM4_128|CBC|PKCS7'], ivLen: COMMON_IV_LEN, paramsSpecAlgName: 'IvParamsSpec' }) ], CipherInfoCenter, "SM4_CBC_PKCS7_PADDING", void 0); __decorate([ aegisCipherInfo({ transformation: ['SM4_128|CBC|PKCS5'], ivLen: COMMON_IV_LEN, paramsSpecAlgName: 'IvParamsSpec' }) ], CipherInfoCenter, "SM4_CBC_PKCS5_PADDING", void 0); __decorate([ aegisCipherInfo({ transformation: ['SM4_128|CTR|NoPadding'], ivLen: COMMON_IV_LEN, paramsSpecAlgName: 'IvParamsSpec' }) ], CipherInfoCenter, "SM4_CTR_NO_PADDING", void 0); __decorate([ aegisCipherInfo({ transformation: ['SM4_128|OFB|NoPadding'], ivLen: COMMON_IV_LEN, paramsSpecAlgName: 'IvParamsSpec' }) ], CipherInfoCenter, "SM4_OFB_NO_PADDING", void 0); __decorate([ aegisCipherInfo({ transformation: ['SM4_128|CFB|NoPadding'], ivLen: COMMON_IV_LEN, paramsSpecAlgName: 'IvParamsSpec' }) ], CipherInfoCenter, "SM4_CFB_NO_PADDING", void 0); __decorate([ aegisCipherInfo({ transformation: ['SM4_128|CFB128|NoPadding'], ivLen: COMMON_IV_LEN, paramsSpecAlgName: 'IvParamsSpec' }) ], CipherInfoCenter, "SM4_CFB128_NO_PADDING", void 0); __decorate([ aegisCipherInfo({ transformation: ['RSA3072|PKCS1_OAEP|SHA256|MGF1_SHA256'], keyType: KeyType.RSA_3072_PRIMES_2, nBits: 3072, hashBits: 256 }) ], CipherInfoCenter, "RSA_OAEP_SHA256_MGF1_SHA256", void 0); __decorate([ aegisCipherInfo({ transformation: ['SM2_256|SHA256'], keyType: KeyType.SM2_256, plainTextMaxLen: 130796, cipherTextMaxLen: 130909 }) ], CipherInfoCenter, "SM2_256_SHA256", void 0); __decorate([ aegisCipherInfo({ transformation: ['SM2_256|SHA384'], keyType: KeyType.SM2_256, plainTextMaxLen: 130780, cipherTextMaxLen: 130909 }) ], CipherInfoCenter, "SM2_256_SHA384", void 0); __decorate([ aegisCipherInfo({ transformation: ['SM2_256|SHA512'], keyType: KeyType.SM2_256, plainTextMaxLen: 130764, cipherTextMaxLen: 130909 }) ], CipherInfoCenter, "SM2_256_SHA512", void 0); __decorate([ aegisCipherInfo({ transformation: ['SM2_256|SM3'], keyType: KeyType.SM2_256, plainTextMaxLen: 130796, cipherTextMaxLen: 130909 }) ], CipherInfoCenter, "SM2_256_SM3", void 0); __decorate([ aegisCipherInfo({ ivLen: GCM_IV_LEN, optionsFunc: huksOptions.getAESGcm256CryptoOptions, authTagLen: 16 }) ], CipherInfoCenter, "HUKS_AES_GCM_256_NO_PADDING", void 0); 