import { HmacSigner, SignAlg } from "../ets/a/b"; import { AegLogger } from "./c2/d2"; import { getStrOrUint8ToUint8, getUint8Array, uint8ArraytoHexString } from "./q/s2"; export class AegHmac { static async ohAegHmacSha256Text(text, key) { return new Promise(async (y16, z16) => { try { let a17 = getStrOrUint8ToUint8(text); AegHmac.ohAegHmacSha256Uint8Array(a17, key).then((data) => { return y16(data); }).catch((err) => { AegLogger.error(AegHmac.TAG, 'ohAegHmacSha256Text ohAegHmacSha256Uint8Array fail, err code: ' + err.code + ', err msg: ' + err.message); z16(err); }); } catch (err) { AegLogger.error(AegHmac.TAG, 'ohAegHmacSha256Text fail, err code: ' + err.code + ', err msg: ' + err.message); z16(err); } }); } static async ohAegHmacSha256TextHex(text, key) { return new Promise(async (s16, t16) => { try { let u16 = getStrOrUint8ToUint8(text); AegHmac.ohAegHmacSha256Hex(u16, key).then((data) => { return s16(data); }).catch((err) => { AegLogger.error(AegHmac.TAG, 'ohAegHmacSha256TextHex ohAegHmacSha256Hex fail, err code: ' + err.code + ', err msg: ' + err.message); t16(err); }); } catch (err) { AegLogger.error(AegHmac.TAG, 'ohAegHmacSha256TextHex fail, err code: ' + err.code + ', err msg: ' + err.message); t16(err); } }); } static async ohAegHmacSha256Hex(k16, key) { return new Promise(async (m16, n16) => { try { AegHmac.ohAegHmacSha256Uint8Array(k16, key).then((data) => { let q16 = uint8ArraytoHexString(data); m16(q16); }).catch((err) => { AegLogger.error(AegHmac.TAG, 'ohAegHmacSha256Hex ohAegHmacSha256Uint8Array fail, err code: ' + err.code + ', err msg: ' + err.message); n16(err); }); } catch (err) { AegLogger.error(AegHmac.TAG, 'ohAegHmacSha256Hex parse fail, err code: ' + err.code + ', err msg: ' + err.message); n16(err); } }); } static async ohAegHmacSha256Uint8Array(a16, key) { return new Promise(async (c16, d16) => { try { let e16 = getUint8Array(a16); let f16 = getUint8Array(key); if (f16.length !== AegHmac.KEY_LEN) { let j16 = 'key length is not 32, key length: ' + key.length.toString(); AegLogger.error(AegHmac.TAG, 'ohAegHmacSha256Uint8Array key err : ' + j16); return d16(j16); } let g16 = await HmacSigner .builder() .withSignAlg(SignAlg.HMAC_SHA256) .withKeyBytes(f16) .build(); g16.getSignHandler().from(e16).to().then((data) => { c16(data); }).catch((err) => { AegLogger.error(AegHmac.TAG, 'ohAegHmacSha256Uint8Array getSignHandler fail, err code: ' + err.code + ', err msg: ' + err.message); d16(err); }); } catch (err) { AegLogger.error(AegHmac.TAG, 'ohAegHmacSha256Uint8Array parse fail, err code: ' + err.code + ', err msg: ' + err.message); d16(err); } }); } } AegHmac.TAG = 'aegis AegHmac'; AegHmac.KEY_LEN = 32; 