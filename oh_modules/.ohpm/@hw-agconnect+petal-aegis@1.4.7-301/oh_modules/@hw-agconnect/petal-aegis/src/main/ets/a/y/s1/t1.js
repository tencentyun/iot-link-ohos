import buffer from '@ohos.buffer'; import { Logger } from "../../c2/d2"; const BUFFER_ENCODING_BASE64 = 'base64'; const BUFFER_ENCODING_UTF8 = 'utf8'; const BUFFER_ENCODING_HEX = 'hex'; const BUFFER_ENCODING_BASE64URL = 'base64url'; class BufferCoder { constructor(encoding) { this.encoding = encoding; } encode(input) { return buffer.from(input).toString(this.encoding); } decode(input) { try { return new Uint8Array(buffer.from(input, this.encoding).buffer); } catch (err) { Logger.error(`decode failed for encoding:${this.encoding.toString()}`); return new Uint8Array(); } } decodeToString(input) { return buffer.from(this.decode(input)).toString(BUFFER_ENCODING_UTF8); } } class HexCoder extends BufferCoder { constructor(isUpperCase) { super(BUFFER_ENCODING_HEX); this.isUpperCase = isUpperCase; } encode(input) { let y3 = super.encode(input); return this.isUpperCase ? y3.toUpperCase() : y3; } } export class Coder { static create() { return new Coder(); } from(data) { this.buffer = buffer.from(data); return this; } fromString(data) { this.buffer = buffer.from(data); return this; } fromHex(data) { this.buffer = buffer.from(data, BUFFER_ENCODING_HEX); return this; } fromBase64(data) { this.buffer = buffer.from(data, BUFFER_ENCODING_BASE64); return this; } fromBase64Url(data) { this.buffer = buffer.from(data, BUFFER_ENCODING_BASE64URL); return this; } to() { return new Uint8Array(this.buffer.buffer); } toString() { return this.buffer.toString(); } toHex() { return this.buffer.toString(BUFFER_ENCODING_HEX); } toBase64() { return this.buffer.toString(BUFFER_ENCODING_BASE64); } toBase64Url() { return this.buffer.toString(BUFFER_ENCODING_BASE64URL); } } Coder.UTF8 = new BufferCoder(BUFFER_ENCODING_UTF8); Coder.HEX = new HexCoder(); Coder.HEX_UPPER_CASE = new HexCoder(true); Coder.BASE64 = new BufferCoder(BUFFER_ENCODING_BASE64); Coder.BASE64URL = new BufferCoder(BUFFER_ENCODING_BASE64URL); 