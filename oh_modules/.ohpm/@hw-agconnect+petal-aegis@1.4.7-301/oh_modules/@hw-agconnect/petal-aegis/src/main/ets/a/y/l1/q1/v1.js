import cryptoFramework from '@ohos.security.cryptoFramework'; import { AegisError } from "../../../s/t"; import { AegisErrorCode } from "../../../s/u"; import { AsyKeyBuilder } from "../../z/f2"; import { KeyConverter } from "../../z/c1"; import { Signer } from "../m1"; import { SignerInfoCenter } from "../l2"; import { SignHandler } from "../m2"; import { VerifyHandler } from "../n2"; import { HuksAsySigner } from "./o2"; class AsySignHandler extends SignHandler { constructor(x6, key) { super(x6); this.key = key; } async doSign() { let v6 = SignerInfoCenter.load(this.signAlg); let w6 = cryptoFramework.createSign(v6.algName); if (v6.pssSaltLen) { w6.setSignSpec(cryptoFramework.SignSpecItem.PSS_SALT_LEN_NUM, v6.pssSaltLen); } await w6.init(this.key); for (let input of this.inputs) { await w6.update({ data: input }); } let signature = await w6.sign(null); return signature.data; } } class AsyVerifyHandler extends VerifyHandler { constructor(u6, key) { super(u6); this.key = key; } async doVerify(signature) { let s6 = SignerInfoCenter.load(this.signAlg); let t6 = cryptoFramework.createVerify(s6.algName); if (s6.pssSaltLen) { t6.setVerifySpec(cryptoFramework.SignSpecItem.PSS_SALT_LEN_NUM, s6.pssSaltLen); } await t6.init(this.key); for (let input of this.inputs) { await t6.update({ data: input }); } return await t6.verify(null, { data: signature }); } } export class AsySigner extends Signer { constructor(q6, r6) { super(q6); this.signHandler = new AsySignHandler(q6, r6.priKey); this.verifyHandler = new AsyVerifyHandler(q6, r6.pubKey); } static builder() { return new AsySignerBuilder(); } } class AsySignerBuilder extends AsyKeyBuilder { withSignAlg(p6) { this.signAlg = p6; return this; } static o(o6) { if (!o6) { throw new AegisError(AegisErrorCode.PARAM_INVALID, 'invalid sign alg'); } } async build() { await this.initKeys(); if (this.keyAlias) { return new HuksAsySigner(this.signAlg, this.keyAlias); } return new AsySigner(this.signAlg, this.keyPair); } getKeyType() { let n6 = SignerInfoCenter.load(this.signAlg); AsySignerBuilder.o(n6); return n6.keyType; } getRSANBits() { var l6; let m6 = SignerInfoCenter.load(this.signAlg); AsySignerBuilder.o(m6); return (l6 = m6.nBits) !== null && l6 !== void 0 ? l6 : KeyConverter.DEFAULT_RSA_N_BITS; } } 