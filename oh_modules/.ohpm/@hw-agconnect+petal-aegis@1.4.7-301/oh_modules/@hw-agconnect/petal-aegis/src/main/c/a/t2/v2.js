import { AESCipher } from "../../../ets/a/b"; import { SafeRandom } from "../../e"; import { AegLogger } from "../../c2/d2"; import { AlgUtil } from "../v/h3"; import { CipherUtil } from "../v/i3"; import { hexStringToUint8Array, stringToUint8Array, uint8ArraytoHexString, uint8ArrayToString } from "../../q/s2"; export class Aes { static async aesEncText(t27, u27, key, iv) { return new Promise(async (w27, x27) => { try { let y27 = stringToUint8Array(u27); Aes.aesEnc(t27, y27, key, iv).then((data) => { w27(data); }).catch((err) => { AegLogger.error(Aes.TAG, 'Aes.aesEnc getEncryptHandler fail, err code: ' + err.code + ', err msg: ' + err.message); x27(err); }); } catch (err) { AegLogger.error(Aes.TAG, 'aesEncTextHex parse fail, err code: ' + err.code + ', err msg: ' + err.message); x27(err); } }); } static async aesDecText(l27, m27, key, iv) { return new Promise(async (o27, p27) => { try { Aes.aesDec(l27, m27, key, iv).then((data) => { let s27 = uint8ArrayToString(data); o27(s27); }).catch((err) => { AegLogger.error(Aes.TAG, 'Aes.aesDec fail, err code: ' + err.code + ', err msg: ' + err.message); p27(err); }); } catch (err) { AegLogger.error(Aes.TAG, 'aesDecTextHex parse fail, err code: ' + err.code + ', err msg: ' + err.message); p27(err); } }); } static async aesEncTextHex(y26, z26, key, iv) { return new Promise(async (b27, c27) => { try { let d27 = stringToUint8Array(z26); let e27 = AlgUtil.getAesAlgType(y26); Aes.aesEnc(y26, d27, key, iv).then((data) => { let h27 = uint8ArraytoHexString(data); if (!iv) { let i27 = e27.ivLen * 2; let j27 = h27.slice(0, i27); let k27 = h27.slice(i27 + 2); h27 = j27 + ':' + k27; } b27(h27); }).catch((err) => { AegLogger.error(Aes.TAG, 'Aes.aesEnc getEncryptHandler fail, err code: ' + err.code + ', err msg: ' + err.message); c27(err); }); } catch (err) { AegLogger.error(Aes.TAG, 'aesEncTextHex parse fail, err code: ' + err.code + ', err msg: ' + err.message); c27(err); } }); } static async aesDecTextHex(p26, q26, key, iv) { return new Promise(async (s26, t26) => { try { if (!iv) { q26 = q26.replace(":", "3a"); } let u26 = hexStringToUint8Array(q26); Aes.aesDec(p26, u26, key, iv).then((data) => { let x26 = uint8ArrayToString(data); s26(x26); }).catch((err) => { AegLogger.error(Aes.TAG, 'Aes.aesDec fail, err code: ' + err.code + ', err msg: ' + err.message); t26(err); }); } catch (err) { AegLogger.error(Aes.TAG, 'aesDecTextHex parse fail, err code: ' + err.code + ', err msg: ' + err.message); t26(err); } }); } static async aesEnc(d26, e26, key, iv) { return new Promise(async (g26, h26) => { try { let i26 = new Uint8Array(); let j26 = AlgUtil.getAesAlgType(d26); if (iv) { i26 = AlgUtil.getUint8ArrayFromHex(iv); } else { i26 = SafeRandom.ohAegRandom(j26.ivLen); } let k26 = AlgUtil.getUint8ArrayFromHex(key); let l26 = await AESCipher .builder() .withCipherAlg(j26.algType) .withKeyBytes(k26) .withIv(i26) .build(); l26.getEncryptHandler().from(e26).to().then((data) => { if (iv) { g26(data); } else { let o26 = CipherUtil.getCipherText(i26, data); g26(o26); } }).catch((err) => { AegLogger.error(Aes.TAG, 'aesEncText getEncryptHandler fail, err code: ' + err.code + ', err msg: ' + err.message); h26(err); }); } catch (err) { AegLogger.error(Aes.TAG, 'aesEncText parse fail, err code: ' + err.code + ', err msg: ' + err.message); h26(err); } }); } static async aesDec(q25, r25, key, iv) { return new Promise(async (t25, u25) => { try { let v25 = AlgUtil.getAesAlgType(q25); let w25 = new Uint8Array(); let x25 = new Uint8Array(); if (iv) { w25 = AlgUtil.getUint8ArrayFromHex(iv); x25 = r25; } else { let c26 = CipherUtil.getCiphertextUint8Array(r25, v25.ivLen); w25 = c26.iv; x25 = c26.text; } let y25 = AlgUtil.getUint8ArrayFromHex(key); let z25 = await AESCipher .builder() .withCipherAlg(v25.algType) .withKeyBytes(y25) .withIv(w25) .build(); z25.getDecryptHandler().from(x25).to().then((data) => { t25(data); }).catch((err) => { AegLogger.error(Aes.TAG, 'AesDecText getDecryptHandler fail, err code: ' + err.code + ', err msg: ' + err.message); u25(err); }); } catch (err) { AegLogger.error(Aes.TAG, 'AesDecText parse fail, err code: ' + err.code + ', err msg: ' + err.message); u25(err); } }); } } Aes.TAG = 'aegis Aes'; export const aesEncText = Aes.aesEncText; export const aesDecText = Aes.aesDecText; export const aesEncTextHex = Aes.aesEncTextHex; export const aesDecTextHex = Aes.aesDecTextHex; export const aesEnc = Aes.aesEnc; export const aesDec = Aes.aesDec; 