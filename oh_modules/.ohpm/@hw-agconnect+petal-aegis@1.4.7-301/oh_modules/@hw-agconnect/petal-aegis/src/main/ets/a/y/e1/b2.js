import { AegisError } from "../../s/t"; import { AegisErrorCode } from "../../s/u"; import { DataProcessor } from "../h2"; import { Logger } from "../../c2/d2"; export class CipherHandler extends DataProcessor { constructor(m3) { super(); this.cipherAlg = m3; } fromArray(data) { this.inputs = data; return this; } async toArray() { let l3 = []; await this.doCrypto(l3, null); return l3; } async to() { try { let k3 = []; await this.doCrypto(null, k3); this.clear(); return new Uint8Array(k3); } catch (err) { let errMsg = `crypto failed, code:${err.code} msg:${err.message}`; Logger.error(errMsg); if (err instanceof AegisError) { throw err; } throw new AegisError(AegisErrorCode.CRYPTO_ERROR, errMsg); } } } 