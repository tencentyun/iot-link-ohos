import huks from '@ohos.security.huks'; import { HuksSignHandler } from "../p2"; import { HuksVerifyHandler } from "../q2"; import { Signer } from "../m1"; import { SignerInfoCenter } from "../l2"; class HuksAsySignHandler extends HuksSignHandler { constructor(d7, mode, keyAlias) { super(d7, keyAlias); this.mode = mode; } async doSign() { let b7 = SignerInfoCenter.load(this.signAlg); let options = b7.optionsFunc(this.mode); let handle = await huks.initSession(this.keyAlias, options); for (let input of this.inputs) { options.inData = input; await huks.updateSession(handle.handle, options); } options.inData = new Uint8Array(); let c7 = await huks.finishSession(handle.handle, options); return c7.outData; } } class HuksAsyVerifyHandler extends HuksVerifyHandler { constructor(a7, mode, keyAlias) { super(a7, keyAlias); this.mode = mode; } async doVerify(signature) { let z6 = SignerInfoCenter.load(this.signAlg); let options = z6.optionsFunc(this.mode); let handle = await huks.initSession(this.keyAlias, options); for (let input of this.inputs) { options.inData = input; await huks.updateSession(handle.handle, options); } options.inData = signature; try { await huks.finishSession(handle.handle, options); return true; } catch (err) { throw err; } } } export class HuksAsySigner extends Signer { constructor(y6, keyAlias) { super(y6); this.signHandler = new HuksAsySignHandler(y6, huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_SIGN, keyAlias); this.verifyHandler = new HuksAsyVerifyHandler(y6, huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_VERIFY, keyAlias); } } 