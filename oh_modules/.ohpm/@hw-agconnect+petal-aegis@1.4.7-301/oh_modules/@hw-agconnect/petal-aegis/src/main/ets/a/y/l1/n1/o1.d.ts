import cryptoFramework from '@ohos.security.cryptoFramework'; import { Signer } from "../m1"; import type { SignAlg } from "../p1"; import { SignHandler } from "../m2"; import { VerifyHandler } from "../n2"; export declare class HmacSignHandler extends SignHandler { protected key: cryptoFramework.SymKey; constructor(t45: SignAlg, key: cryptoFramework.SymKey); doSign(): Promise<Uint8Array>; } export declare class HmacVerifyHandler extends VerifyHandler { private key; constructor(s45: SignAlg, key: cryptoFramework.SymKey); doVerify(target: Uint8Array): Promise<boolean>; } export declare class HmacSigner extends Signer { constructor(r45: SignAlg, key: cryptoFramework.SymKey); static builder(): HmacSignerBuilder; } declare class HmacSignerBuilder { private signAlg; private key; private i; private keyAlias; withSignAlg(q45: SignAlg): this; withKey(key: cryptoFramework.SymKey): this; withKeyBytes(p45: Uint8Array): this; withKeyHex(o45: string): this; withKeyBase64(n45: string): this; withKeyAlias(keyAlias: string): this; build(): Promise<Signer>; } export {}; 