import { Coder } from "./s1/t1"; export class DataReceiver { constructor() { this.inputs = []; } from(data) { this.inputs.push(data); return this; } fromWithCoder(data, a4) { this.inputs.push(a4.decode(data)); return this; } fromString(data) { return this.fromWithCoder(data, Coder.UTF8); } fromBase64(data) { return this.fromWithCoder(data, Coder.BASE64); } fromBase64Url(data) { return this.fromWithCoder(data, Coder.UTF8); } fromHex(data) { return this.fromWithCoder(data, Coder.HEX); } clear() { this.inputs = []; } } export class DataProcessor extends DataReceiver { async toWithCoder(z3) { return z3.encode(await this.to()); } async toString() { return await this.toWithCoder(Coder.UTF8); } async toBase64() { return await this.toWithCoder(Coder.BASE64); } async toBase64Url() { return await this.toWithCoder(Coder.BASE64URL); } async toHex(isUpperCase) { return await this.toWithCoder(isUpperCase ? Coder.HEX_UPPER_CASE : Coder.HEX); } } 