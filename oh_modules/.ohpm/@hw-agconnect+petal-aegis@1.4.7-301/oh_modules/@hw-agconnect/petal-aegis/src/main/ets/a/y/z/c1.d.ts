import cryptoFramework from '@ohos.security.cryptoFramework'; import cryptoCert from '@ohos.security.cert'; import { KeyType } from "./a1"; export declare class KeyConverter { static readonly DEFAULT_RSA_N_BITS: number; static fromKeyPair(w44: KeyType, priKey: Uint8Array, pubKey: Uint8Array): Promise<cryptoFramework.KeyPair>; static fromRSAKeyPair(priKey: Uint8Array, pubKey: Uint8Array): Promise<cryptoFramework.KeyPair>; static fromECKeyPair(priKey: Uint8Array, pubKey: Uint8Array): Promise<cryptoFramework.KeyPair>; static getRSANBitsOfKey(key: cryptoFramework.PriKey | cryptoFramework.PubKey): number; static fromSM2KeyPair(priKey: Uint8Array, pubKey: Uint8Array): Promise<cryptoFramework.KeyPair>; static fromPKCS8PriKey(u44: KeyType, v44: Uint8Array): Promise<cryptoFramework.KeyPair>; static fromX509PubKey(s44: KeyType, t44: Uint8Array): Promise<cryptoFramework.KeyPair>; static checkAESKeyLen(r44: Uint8Array): void; static fromSymKey(q44: Uint8Array): Promise<cryptoFramework.SymKey>; static fromCertPEM(p44: string): Promise<cryptoCert.X509Cert>; static fromCertDER(o44: Uint8Array): Promise<cryptoCert.X509Cert>; } 