import { HmacSigner, Md } from "../../../ets/a/b"; import { AegLogger } from "../../c2/d2"; import { AlgUtil } from "../v/h3"; import { HashAlg } from "./f3"; import { uint8ArraytoHexString } from "../../q/s2"; export class Hash { static async hash(g25, h25) { return new Promise((j25, k25) => { try { let l25 = AlgUtil.getUint8Array(h25); let md = Md.SHA256(); switch (g25) { case HashAlg.SHA256: md = Md.SHA256(); break; case HashAlg.SHA384: md = Md.SHA384(); break; case HashAlg.SHA512: md = Md.SHA512(); break; case HashAlg.SM3: md = Md.SM3(); break; } md.from(l25).to().then((data) => { j25(data); }).catch((err) => { AegLogger.error(Hash.TAG, 'hash Md.SHA fail, err code: ' + err.code + ', err msg: ' + err.message); k25(err); }); } catch (err) { AegLogger.error(Hash.TAG, 'hash parse fail, err code: ' + err.code + ', err msg: ' + err.message); k25(err); } }); } static async hashHex(y24, z24) { return new Promise((b25, c25) => { try { Hash.hash(y24, z24).then((data) => { let f25 = uint8ArraytoHexString(data); b25(f25); }).catch((err) => { AegLogger.error(Hash.TAG, 'hashHex Hash.hash fail, err code: ' + err.code + ', err msg: ' + err.message); c25(err); }); } catch (err) { AegLogger.error(Hash.TAG, 'hashHex parse fail, err code: ' + err.code + ', err msg: ' + err.message); c25(err); } }); } static async hmac(n24, text, key) { return new Promise(async (p24, q24) => { try { let r24 = AlgUtil.getHmacAlgType(n24); let s24 = AlgUtil.getUint8Array(text); let t24 = AlgUtil.getUint8ArrayFromHex(key); if (t24.length < r24.keyLen) { let x24 = 'input key length is ' + t24.length.toString() + ' Less than hmackey length : ' + r24.keyLen.toString(); AegLogger.error(Hash.TAG, 'Hmac key err : ' + x24); return q24(x24); } let u24 = await HmacSigner .builder() .withSignAlg(r24.algType) .withKeyBytes(t24) .build(); u24.getSignHandler().from(s24).to().then((data) => { p24(data); }).catch((err) => { AegLogger.error(Hash.TAG, 'Hmac getSignHandler fail, err code: ' + err.code + ', err msg: ' + err.message); q24(err); }); } catch (err) { AegLogger.error(Hash.TAG, 'Hmac parse fail, err code: ' + err.code + ', err msg: ' + err.message); q24(err); } }); } static async hmacHex(g24, text, key) { return new Promise(async (i24, j24) => { try { Hash.hmac(g24, text, key).then((data) => { let m24 = uint8ArraytoHexString(data); i24(m24); }).catch((err) => { AegLogger.error(Hash.TAG, 'Hmac getSignHandler fail, err code: ' + err.code + ', err msg: ' + err.message); j24(err); }); } catch (err) { AegLogger.error(Hash.TAG, 'Hmac parse fail, err code: ' + err.code + ', err msg: ' + err.message); j24(err); } }); } } Hash.TAG = 'aegis Hash'; export const hash = Hash.hash; export const hashHex = Hash.hashHex; export const hmac = Hash.hmac; export const hmacHex = Hash.hmacHex; 